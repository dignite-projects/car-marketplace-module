// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using Dignite.CarMarketplace.Cars;
using Dignite.CarMarketplace.DealerPlatform.Cars;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace Dignite.CarMarketplace.DealerPlatform.Cars;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IUsedCarAppService), typeof(UsedCarClientProxy))]
public partial class UsedCarClientProxy : ClientProxyBase<IUsedCarAppService>, IUsedCarAppService
{
    public virtual async Task<UsedCarDto> CreateAsync(UsedCarCreateDto input)
    {
        return await RequestAsync<UsedCarDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(UsedCarCreateDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<UsedCarDto> GetAsync(Guid id)
    {
        return await RequestAsync<UsedCarDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<UsedCarDto>> GetListAsync(GetUsedCarsInput input)
    {
        return await RequestAsync<PagedResultDto<UsedCarDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(GetUsedCarsInput), input }
        });
    }

    public virtual async Task SetStatusAsync(Guid id, CarStatus status)
    {
        await RequestAsync(nameof(SetStatusAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(CarStatus), status }
        });
    }

    public virtual async Task<UsedCarDto> UpdateAsync(Guid id, UsedCarUpdateDto input)
    {
        return await RequestAsync<UsedCarDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UsedCarUpdateDto), input }
        });
    }
}
